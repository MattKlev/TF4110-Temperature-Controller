<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{af87d6dd-0784-46eb-bd9b-ea6d96cfb9a1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
		(* Controller *)
		eCTRL_ModeController 	: E_CTRL_MODE := E_CTRL_MODE.eCTRL_MODE_IDLE;
		
		fW						: LREAL	:= 100.0;				(* setpoint *)
		fY						: LREAL;						(* control value *)
		fX						: LREAL;						(* actual value from simulated process *)
		
	
		stControllerParameter	: ST_CTRL_TempCtrlParameter := (		
		
			(* general parameters 													 *)
			iMode					:= 1,											(* 1=heating, 2=cooling, 3=heating&cooling *)
			iReactionOnFailure		:= eCTRL_ReactionOnFailure_StopController,		(* 0=controller off, 1=manual op, 2=yMin, 3=yMax *)
	    	
			bSelCtrlParameterSet	:= FALSE,										(* FALSE = internal set, TRUE = external set *)//Internal are calculated after an auto tune
	    	
			dwAlarmSupp				:= 16#0000EFFF,									(* alarm suppression *)
			tCtrlCycleTime			:= T#10MS,										(* controller cycle time *)
			tTaskCycleTime			:= T#10MS,										(* plc task cycle time *)
			
			(* tuning parameters 													 *)
			iTuningMode				:= 1,											(* only heating, only cooling, first heating then cooling or vice versa *)
	    	
			tTuneStabilisation		:= T#5S,										(* wait for a stable system *)
	    	
			fEndTunePercentHeating	:= 80.0,										(* switch to closed loop control when X > 0.8*W *)
			fYTuneHeating			:= 100.0,										(* step change while tuning operation *)
			fYStableHeating			:= 0.0,											(* tuning operation *)
	    	
			fEndTunePercentCooling	:= 20.0,										(* switch to closed loop control when X < 0.2*W *)
			fYTuneCooling			:= 0.0,											(* step change while tuning operation *)
			fYStableCooling			:= 0.0,											(* tuning operation *)
			fScalingFactor			:= 1.0,											(* Scaling factor for KP heating/cooling *)
			
			(* setpoint parameters 													 *)
			fWMin					:= 0.0,											(* lower limit *)
			fWMax					:= 300.0,										(* upper limit *)
	    	
			(* start up *)
			bEnableSoftStart		:= FALSE,										(* FALSE = no soft start, TRUE = soft start *)
			bEnableRamping			:= FALSE,										(* FALSE = no ramping, TRUE = ramping *)
	    	
			fWStartUp				:= 0.0,											(* soft start plateau setpoint *)
			tStartUp				:= T#0MS,										(* soft start waiting time*)
			bStartUpRamping			:= FALSE,										(* enable ramping while start up phase *)
			fWStartUpVeloPos		:= 1.0,											(* max gradient for increasing setpoint in start up phase*)
			fWStartUpVeloNeg		:= 1.0,											(* max gradient for decreasing setpoint in start up phase *)
	    	
			fWVeloPos				:= 1.0,											(* max gradient for increasing setpoint *)
			fWVeloNeg				:= 1.0,											(* max gradient for decreasing setpoint *)	
	    	
			(* actual value parameters     											 *)
			bFilter 				:= FALSE,
			tFilter					:= T#0S,
			
			(* deadband parameters     												 *)
			bDeadband				:= FALSE,
			fEDeadband				:= 0.0,											(* deadband *)
			
			(* control value parameters     										 *)
			fYMin					:= 0.0,											(* lower limit *)
			fYMax					:= 100.0,										(* upper limit *)
			fYManual				:= 0.0,									 		(* manual operation*)
			fYOnFailure				:= 0.0,											(* control value on failure *)
	    	
			tPWMCycleTime			:= t#1s,										(* PWM: period *)
			tPWMMinOffTime			:= t#0s,										(* PWM: min off time *)
			tPWMMinOnTime			:= t#0s,										(* PWM: min on time *)
			tPWMWaitingTime			:= t#0s,										(* PWM: min waiting time *) (* not yet implemented !!!!*)
	    	
			fYThresholdOff			:= 0.0,											(* 3-Point: Off threshold *)
			fYThresholdOn			:= 0.0,											(* 3-Point: On threshold *)
	    	
			nCyclesForSwitchOver	:= 100,
	    	
			(* controller settings			     									 *)
			bEnablePreController 	:= FALSE,										(* enable precontroller *)
			bEnableZones 			:= FALSE,										(* enable zone around setpoint with open loop control *)
			bEnableCVFilter 		:= FALSE,										(* enable filter for CV (type see iFilterType) *)
			iFilterType 			:= E_CTRL_FilterType.eCTRL_FilterType_FIRSTORDER,(* filtertype of CV filter *)
			iControllerType 		:= eCTRL_ControllerType_PID,					(* used controller normally PID *)
			
			
			(* min max temperatures	     											 *)
			TempLow					:= -5.0,
			TempLowLow				:= -10.0,
			TempHigh				:= 5.0,
			TempHighHigh			:= 10.0,
			TempAbsoluteHigh		:= 300.0,
			TempAbsoluteLow			:= 0.0,	
			
			(* internal tuning parameters *)
			fTuneKp					:= 1.2,
			fTuneTn					:= 2.0,
			fTuneTv					:= 0.42,
			fTuneTd					:= 0.25
		);
	
		
	fbTempController			: FB_CTRL_TempController;
	

	stController				: ST_CTRL_ParaController;
	
	Start					:BOOL;
	rtStart					:R_TRIG;
	Stop					:BOOL;
	rtStop					:R_TRIG;
	Reset					:BOOL;
	rtReset					:R_TRIG;
	State					:E_State;
	sState					:STRING;
	Mode					:E_Mode;
	SelectedParameterSet	:E_SelectedParameterSet;
	
	(* Simulate process *)	
	ResetProcess			:BOOL;
	ResetProcessStep		:INT;
	rtResetProcess			:R_TRIG;
	eCTRL_ModeProcess	 	: E_CTRL_MODE := E_CTRL_MODE.eCTRL_MODE_ACTIVE; 	
	fbProcess				: FB_Process;		
	
	
	(*HMI*)
	eControllerModeHMI			:E_CTRL_MODE_HMI;
	sControllerMode				:STRING;
	eControllerState			:E_CTRL_STATE_HMI;
	sControllerState			:STRING;
	
	eProcessModeHMI				:E_CTRL_MODE_HMI;
	sProcessModeHMI				:STRING;
	eProcessStateHMI			:E_CTRL_STATE_HMI;
	sProcessStateHMI			:STRING;
	
	rtClearParameterSet		:R_TRIG;
	ClearParameterSet		:BOOL;	
	

END_VAR
VAR PERSISTENT
	arControllerParams		:ARRAY[E_SelectedParameterSet.Fast..E_SelectedParameterSet.Asymptotic] OF ST_CTRL_ParaController; 
END_VAR
VAR CONSTANT
	arAutoTuneGains			: ARRAY [E_SelectedParameterSet.Fast..E_SelectedParameterSet.Asymptotic] OF ST_AutoTuneGains := [(fKp := 1.2, fTn := 2, fTv := 0.42, fTd := 0.25), (fKp := 1, fTn := 2.5, fTv := 0.42, fTd := 0.25), (fKp := 0.5, fTn := 3, fTv := 1, fTd := 0.25)];
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Simulate process *)
rtResetProcess(CLK:=ResetProcess);
CASE ResetProcessStep OF
	0:
		IF rtResetProcess.Q THEN
			eCTRL_ModeProcess					:=E_CTRL_MODE.eCTRL_MODE_RESET;
			ResetProcessStep:=10;
		END_IF
		
	10:
		IF fbProcess.eState = E_CTRL_STATE.eCTRL_STATE_IDLE THEN
			eCTRL_ModeProcess					:=E_CTRL_MODE.eCTRL_MODE_ACTIVE;
			ResetProcessStep:=0;
		END_IF
END_CASE

fbProcess(	eCTRL_Mode	:= eCTRL_ModeProcess,
			fY 			:= fbTempController.fYAnalog, 
			bNoise 		:= , 
			tTa 		:= stControllerParameter.tTaskCycleTime);	
			
			
			

(* Actual temperature *)				
fX := fbProcess.fX;	

(* Controller *)
fbTempController(
					eCtrlMode				:= eCTRL_ModeController, 
					bSelSetpoint			:= FALSE, 
					fW1						:= fW, 
					fW2						:= , 
					fX						:= fX, 
					fYManual				:= , 
					bOpenThermocouple		:= FALSE, 
					bReverseThermocouple	:= FALSE, 
					bBackVoltage			:= FALSE, 
					bLeakage				:= FALSE, 
					bShortCircuit			:= FALSE, 
					bOpenCircuit			:= FALSE, 
					sParaControllerExternal	:= stController, 
					sControllerParameter	:= stControllerParameter, 
					);
					 
(* Analog output *)			
fY 			:= fbTempController.fYAnalog;

rtStart(CLK:=Start);
rtStop(CLK:=Stop);
rtReset(CLK:=Reset);

CASE State OF 
	E_State.Idel:		
		IF rtStart.Q THEN
			CASE Mode OF 
				E_Mode.Tune:
					State:=E_State.LoadTunningParmaeters;
				E_Mode.Run:
					State:=E_State.LoadRunParameters;
			END_CASE
		ELSIF fbTempController.eCtrlState = E_CTRL_STATE.eCTRL_STATE_ERROR THEN
			State								:=E_State.Error;
		ELSIF rtReset.Q THEN
			State:=E_State.Reset;
		END_IF
		
	E_State.LoadTunningParmaeters:
			stControllerParameter.bSelCtrlParameterSet:=FALSE;
			
			stControllerParameter.fTuneKp:=arAutoTuneGains[SelectedParameterSet].fKp;
			stControllerParameter.fTuneTd:=arAutoTuneGains[SelectedParameterSet].fTd;
			stControllerParameter.fTuneTv:=arAutoTuneGains[SelectedParameterSet].fTv;
			stControllerParameter.fTuneTd:=arAutoTuneGains[SelectedParameterSet].fTd;
			
			eCTRL_ModeController				:=E_CTRL_MODE.eCTRL_MODE_TUNE;
			State								:=E_State.AutoTuneInProgress;
			
	E_State.AutoTuneInProgress:
	
		IF fbTempController.eCtrlState = E_CTRL_STATE.eCTRL_STATE_TUNED THEN		
			//Grab the calculated internal gains from the auto tune, and save them off to a persistent variable
			arControllerParams[SelectedParameterSet]:= fbTempController.sParaControllerInternal;
			eCTRL_ModeController 					:=E_CTRL_MODE.eCTRL_MODE_ACTIVE;
			State									:=E_State.Run;
		ELSIF fbTempController.eCtrlState = E_CTRL_STATE.eCTRL_STATE_ERROR THEN
			State									:=E_State.Error;
		END_IF
		
	E_State.LoadRunParameters:
		//Use "sParaControllerExternal"
		stControllerParameter.bSelCtrlParameterSet:=TRUE;
		stController:=arControllerParams[SelectedParameterSet];
		State									:=E_State.Run;
	
	E_State.Run:	
		eCTRL_ModeController 					:=E_CTRL_MODE.eCTRL_MODE_ACTIVE;
		
		IF fbTempController.eCtrlState = E_CTRL_STATE.eCTRL_STATE_ERROR THEN
			State								:=E_State.Error;
		END_IF
		
		IF rtStop.Q THEN
			eCTRL_ModeController				:=E_CTRL_MODE.eCTRL_MODE_IDLE;
			State								:=E_State.Idel;
		END_IF
		
	E_State.Error:
		IF rtReset.Q THEN
			State:=E_State.Reset;
		END_IF
		
	E_State.Reset:
		eCTRL_ModeController				:=E_CTRL_MODE.eCTRL_MODE_RESET;
		
		IF fbTempController.eCtrlState=E_CTRL_STATE.eCTRL_STATE_IDLE THEN
			eCTRL_ModeController				:=E_CTRL_MODE.eCTRL_MODE_IDLE;
			State								:=E_State.Idel;
		END_IF
END_CASE



(*HMI*)
eControllerModeHMI:=fbTempController.eCtrlMode;
sControllerMode:=TO_STRING(eControllerModeHMI);

eControllerState:=fbTempController.eCtrlState;
sControllerState:=TO_STRING(eControllerState);

eProcessModeHMI:=fbProcess.eCTRL_Mode;
sProcessModeHMI:=TO_STRING(eProcessModeHMI);

eProcessStateHMI:=fbProcess.eState;
sProcessStateHMI:=TO_STRING(eProcessStateHMI);

sState:=TO_STRING(State);

rtClearParameterSet(CLK:=ClearParameterSet );
IF rtClearParameterSet.Q THEN
	MEMSET(destAddr:=ADR(arControllerParams) , fillByte:=0 , n:=SIZEOF(arControllerParams) );
END_IF

]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="951" Count="11" />
      <LineId Id="1175" Count="0" />
      <LineId Id="963" Count="69" />
      <LineId Id="1190" Count="0" />
      <LineId Id="1033" Count="31" />
      <LineId Id="1189" Count="0" />
      <LineId Id="1187" Count="0" />
      <LineId Id="1066" Count="2" />
      <LineId Id="1071" Count="7" />
      <LineId Id="1181" Count="0" />
      <LineId Id="1183" Count="3" />
      <LineId Id="1182" Count="0" />
      <LineId Id="1174" Count="0" />
      <LineId Id="1173" Count="0" />
      <LineId Id="1447" Count="0" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1451" Count="2" />
      <LineId Id="1172" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>